------------------------------------------------------------------------------------------------------------------------

// Red docker
docker network create --driver bridge --subnet 10.0.0.0/24 Network_Caso4

------------------------------------------------------------------------------------------------------------------------

// Servidores de configuracion
docker run -d --net Network_Caso4 --ip <IP_DIAGRAMA> -p <PUERTO_DIAGRAMA>:27017 --name <NOMBRE_DIAGRAMA> mongo mongod --port 27017 --configsvr --bind_ip_all --replSet "<NOMBRE_REPLICA_DIAGRAMA>" --dbpath /data/configdb

// Initiate de los serv. configuracion
rs.initiate(
  {
    _id: "<NOMBRE_REPLICA>",
    configsvr: true,
    members: [
      { _id : 0, host : "<IP_VPN>:<PUERTO_DIAGRAMA>" },
      { _id : 1, host : "<IP_VPN>:<PUERTO_DIAGRAMA>" }
    ]
  }
);

------------------------------------------------------------------------------------------------------------------------

// Servidores Shards
docker run -d --net Network_Caso4 --ip <IP_DIAGRAMA> -p <PUERTO_DIAGRAMA>:27017 --name <NOMBRE_DIAGRAMA> mongo mongod --port 27017 --bind_ip_all --shardsvr --replSet "<NOMBRE_REPLICA_DIAGRAMA>"

// Initiate de los serv. Shards
rs.initiate(
  {
    _id: "<NOMBRE_REPLICA>",
    members: [
      { _id : 0, host : "<IP_VPN>:<PUERTO_DIAGRAMA>" },
      { _id : 1, host : "<IP_VPN>:<PUERTO_DIAGRAMA>" }
    ]
  }
);

------------------------------------------------------------------------------------------------------------------------

// Servidores Router (Hacer el 'addShard(...)' por cada replicaSet que exista)
docker run -d --net Network_Caso4 --ip <IP_DIAGRAMA> -p <PUERTO_DIAGRAMA>:27017 --name <NOMBRE_DIAGRAMA> mongo mongos --port 27017 --bind_ip_all --configdb repSet_Configuracion/<IP_VPN_CONF_1>:<PUERTO_CONF_1>,<IP_VPN_CONF_2>:<PUERTO_CONF_2>

// Agregamos los shard al router
sh.addShard("<NOMBRE_REPLICA>/<IP_VPN_SHARD_1>:<PUERTO_SHARD_1>");

------------------------------------------------------------------------------------------------------------------------

>  *************************  <
>  ** NO SE QUE HACE ESTO **  <
>  *************************  <

// hagan esta parte de distribuir por configuracion los cursos que son de una sede u otra
// para hacer distribucion manual de datos se puede hacer por shardkeys de rangos o con shard tags
// desde el router
sh.addShardTag("repSet_CR", "Costa Rica")
sh.addShardTag("repSet_USA", "Estados Unidos")
sh.addShardTag("repSet_Mexico", "Mexico")
sh.addShardTag("repSet_Guatemala", "Guatemala")

// Asigna un rango en el sharded cluster
sh.addTagRange( "disponibles.servicios",
                { pais: "Costa Rica" },
                { pais: "Costa Rica1" },
                "Costa Rica"
              )

sh.addTagRange( "disponibles.servicios",
                { pais: "Estados Unidos" },
                { pais: "Estados Unidos1" },
                "Estados Unidos"
              )

sh.addTagRange( "disponibles.servicios",
                { pais: "Mexico" },
                { pais: "Mexico1" },
                "Mexico"
              )

sh.addTagRange( "disponibles.servicios",
                { pais: "Guatemala" },
                { pais: "Guatemala1" },
                "Guatemala"
              )

// Indico cual va a ser la base de datos que va a soportar sharding
sh.enableSharding("disponibles");

// luego el collection y el campo del collection que va servir como shardkey
sh.shardCollection("disponibles.servicios", { pais : 1 } );

------------------------------------------------------------------------------------------------------------------------

// Creamos los arbitros(Puede ser que el arbitro no ocupe el '--bind_ip_all')
docker run -d --net Network_Caso4 --ip <IP_DIAGRAMA> --name <NOMBRE_DIAGRAMA> mongo mongod --port 27017 --replSet <NOMBRE_REPLICA>

// >>> Para agregar los arbitros
// voy al router, accedo a la base de datos que est√° en sharding y elevo el writeconcern
db.adminCommand({
  "setDefaultRWConcern" : 1,
  "defaultWriteConcern" : {
    "w" : 2
  },
  "defaultReadConcern" : { "level" : "available" }
});

// Me conecto a cada servidor de replica y le agrego su arbitro
rs.addArb("<IP_DIAGRAMA_ARBITRO>")

------------------------------------------------------------------------------------------------------------------------

// +++ Stop Servers

docker stop Router_David
docker stop Router_Hector

docker stop datos_CR_1
docker stop datos_CR_2
docker stop datos_Guatemala_1
docker stop datos_Guatemala_2 
docker stop datos_USA_1
docker stop datos_USA_2
docker stop datos_Mexico_1
docker stop datos_Mexico_2

docker stop Arbitro_CR 
docker stop Arbitro_Guatemala
docker stop Arbitro_USA
docker stop Arbitro_Mexico

docker stop dispConf1
docker stop dispConf2

------------------------------------------------------------------------------------------------------------------------

// +++ Start Servers

docker start dispConf1
docker start dispConf2

docker start datos_CR_1
docker start datos_CR_2
docker start datos_Guatemala_1
docker start datos_Guatemala_2
docker start datos_USA_1
docker start datos_USA_2
docker start datos_Mexico_1
docker start datos_Mexico_2

docker start Arbitro_CR
docker start Arbitro_Guatemala
docker start Arbitro_USA
docker start Arbitro_Mexico

docker start Router_David
docker start Router_Hector